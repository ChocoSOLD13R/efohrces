# =========================================================== #
#    Left Behind : Eternal FOHRces scripts by ChocoSOLDIER    #
#  Created for the 2023 Slime Salad Ridiculous Games Contest  #
# =========================================================== #

include, efOHRces_ext.hsi
include, efOHRces_input.hss
include, efOHRces_units.hss
include, efOHRces_menus.hss
include, efOHRces_buildings.hss

plotscript, titleScreen, begin
  variable(menu,title,menuNewgame,menuLoadgame,menuExit,i)

# Disable default controls
  suspendPlayer

#  if(preTitlePlayed == 0)then(preTitle())

#Display title screen
  showBackdrop(1)
  menu := loadSliceCollection(3)
  menuNewgame := lookupSlice(sli:titleMenuPlay)
  menuLoadgame := lookupSlice(sli:titleMenuContinue)
  menuExit := lookupSlice(sli:titleMenuExit)

# set inputs to false, just in case
  resetInputs()
  
# menu := openMenu(menu:Title) 
# Enable the mouse
  startMouse()
  wait(1)
  fadeScreenIn

while(true)do(
  doMouse()
  if(escPressed)then(
    gameOver
    )elseif(sliceCollidePoint((menuNewgame),mousePixelX,mousePixelY)) then(
        if(stopNoise<>1)then(
          playSound(2,false,true)
          stopNoise := 1
          )
        setCursor(cursor:pick)
      setTextColor(lastChild(menuNewgame), 74)
        if(leftClick)then(
          playSound(3)
            setTextColor(lastChild(menuNewgame), 240)
            wait(5)
            setTextColor(lastChild(menuNewgame), 108)
            wait(5)
            setTextColor(lastChild(menuNewgame), 74)
            wait(5)
            setTextColor(lastChild(menuNewgame), 240)
            waitForSound(3)
            titleMenuPlay()
            ) #then
    )elseif(sliceCollidePoint((menuLoadgame),mousePixelX,mousePixelY))then(
        if(stopNoise<>1)then(
          playSound(2,false,true)
          stopNoise := 1
          )
        setCursor(cursor:pick)
        setTextColor(lastChild(menuLoadgame), 74)
        if(leftClick)then(
          playSound(3)
            setTextColor(lastChild(menuLoadgame), 240)
            wait(5)
            setTextColor(lastChild(menuLoadgame), 108)
            wait(5)
            setTextColor(lastChild(menuLoadgame), 74)
            wait(5)
            setTextColor(lastChild(menuLoadgame), 240)
            waitForSound(3)
            menuContinue()
            ) #then
    )elseif(sliceCollidePoint((menuExit),mousePixelX,mousePixelY))then(
          if(stopNoise<>1)then(
          playSound(2,false,true)
          stopNoise := 1
          )
        setCursor(cursor:pick)
        setTextColor(lastChild(menuExit), 74)
        if(leftClick)then(
            playSound(3)
            setTextColor(lastChild(menuExit), 240)
            wait(5)
            setTextColor(lastChild(menuExit), 108)
            wait(5)
            setTextColor(lastChild(menuExit), 74)
            wait(5)
            setTextColor(lastChild(menuExit), 240)
            waitForSound(3)
            titleMenuQuit()
          )
    )elseif(sliceCollidePoint(lookupSlice(sli:titleEasterEgg),mousePixelX,mousePixelY) ) then(
          setcursor(cursor:pick)
         if(leftClick) then(playSound(7))
    )else(
      setTextColor(lastChild(menuNewGame),240)
      setTextColor(lastChild(menuLoadGame),240)  
      setTextColor(lastChild(menuExit),240)
      setCursor(cursor:pointer)
      stopNoise := 0
    )

    resetInputs()
  wait(1)
  ) #do
end

# Shows pre-title bumps for 3eg, HBA, and OHR
plotscript, preTitle, begin

# Start by defining variables to hold our text. Each one has a "shadow" double offset from it to give the illusion of depth
  variable(textOnScreen,moreText,shadowText,moreShadowText,thirdText,thirdShadowText )
  shadowText := createText
  textOnScreen := createText
  moreShadowText := createText
  moreText := createText
  thirdShadowText := createText
  thirdText := createText
  fadeScreenOut #black the screen while we change stuff
  realignSlice(shadowText,edge:center,edge:middle,edge:center,edge:middle)
  realignSlice(textOnScreen,edge:center,edge:middle,edge:center,edge:middle)
  realignSlice(moreShadowText,edge:center,edge:middle,edge:center,edge:middle)
  realignSlice(moreText,edge:center,edge:middle,edge:center,edge:middle)
  realignSlice(thirdShadowText,edge:center,edge:middle,edge:center,edge:middle)
  realignSlice(thirdText,edge:center,edge:middle,edge:center,edge:middle)
  setTextColor(shadowText,96)
  setTextColor(moreShadowText,96)
  setTextColor(thirdShadowText,96)
  setTextColor(textOnScreen,108)
  setTextColor(moreText,74)
  setOutline(textOnScreen,true)
  setOutline(moreText,true)
  setOutline(thirdText,true)
  putSlice(textOnScreen,0,0)
  putSlice(shadowText,2,3)
  $0 = "Third Ear Games"
  setSliceText(textOnScreen,0)
  setSliceText(shadowText,0)
  showBackdrop(2)           #put a black backdrop behind our text
  wait(1)                   #make sure it stays black long enough
  fadeScreenIn              #ok show the player
  wait(175)                 #give em time to read
  fadeScreenOut             #ok fuck em that's long enough, now do it all again for the next part
  putSlice(textOnScreen,0,-12)
  putSlice(shadowText,2,-9)
  $0 = "in collaboration with"
  setSliceText(textOnScreen,0)
  setSliceText(shadowText,0)
  putSlice(moreShadowText,2,3)
  putSlice(moreText,0,0)
  $0 = "Half Baked Media"
  setSliceText(moreText,0)
  setSliceText(moreShadowText,0)
  $0 = "presents"
  setSliceText(thirdText,0)
  setSliceText(thirdShadowText,0)
  putSlice(thirdText,0,13)
  putSlice(thirdShadowText,2,16)
  wait(36)
  fadeScreenIn
  wait(250)
  fadeScreenOut
  $0 = "A Ridiculous Game"
  setSliceText(textOnScreen,0)
  setSliceText(shadowText,0)
  $0 = "powered by"
  setSliceText(moreText,0)
  setSliceText(moreShadowText,0)
  $0 = "OHR RPG CE"
  setSliceText(thirdText,0)
  setSliceText(thirdShadowText,0)
  wait(36)
  fadeScreenIn
  wait(250)
  fadeScreenOut
  freeSlice(textOnScreen)
  freeSlice(shadowText)
  freeSlice(moreText)
  freeSlice(moreShadowText)
  freeSlice(thirdText)
  freeSlice(thirdShadowText)
  preTitlePlayed := 1         #now we're done, so set this bit to true to keep it from playing again
  wait(36)
  resetInputs()               #clear out our inputs just in case
  titleScreen()               #show the title screen menu
end

# Starts up the game and sets some initial values for stuff
plotscript, bootstrap, begin
  setHeroPosition(me, -1, -1)

# Load up the HUD
  hud := loadSliceCollection(1)
  setSliceVisible(lookupSlice(sli:unitStatsHud), false)

# Initialize the slice that keeps player stats
  playerStatSlice := createContainer
  resizeExtra(playerStatSlice,5)

# The command buttons have their own script. Should they? I do not have the answers.
  initCommandMenu()

# Set the killswitch so we can shut down the main loop if we need and set the game state to idle.
  gameRunning := true
  state := state:idle

# Create the first unit and place it on the map
  npcIdCounter := 0 #This is a lazy way to ensure all units have unique NPC IDs and should be replaced by something more sophisticated
  createUnit(5, 5, unit:disciple)

# lol idk what this is for, I'm going full cargo cult here
  selectedUnit := -1

# Reset inputs just in case
  resetInputs()

# Wait so the screen can change before fade-in
  wait(10)
  fadeScreenIn
# Reset our inputs, just in case
  resetInputs()
# Starts up the big loop that makes the whole game go
  mainLoop()
end

# Main script to make the game go
script, mainLoop, begin  
  variable(
    npc         # for picking up NPC IDs
    unit        # for iterating over all units
    side        # for checking a unit's team
    directive   # for eliminating unit ADD
    target      # for eliminating unit ADD
    x           # for mouse tile X
    y           # for mouse tile Y
#    stopNoise   # for keeping sfx from looping
    hl          # for NPC hover highlight
    mapCursor   # for selecting a tile
    selector    # holds a slice used to select a section of map
    selector2   # holds a second slice used to select a section of map
    mapTarget   # for selecting a target to attack
    i           # for loop counter
    j           # for loop counter
    zonesHere   # used to store the number of zones under the cursor
    zoneWidth   # used to calculate an area of map
    zoneHeight  # used to calculate an area of map
    zoneTileY   # used to calculate an area of map
    zoneTileX   # used to calculate an area of map
    newZoneId   # used to generate new unique zone ID's
    unitAttackCounter # used for combat
    unitAttackSpeed   # used for combat
    )
    stopNoise := 0
    newZoneId := 0
    #these are done in the title screen script and should be commented out when we add the title screen back in
    startMouse()
    suspendPlayer

###########################################################

# This iterates over the map and sets the zones up as buildings. It needs to be called per map and this might not be the best place to call it in the long run.

buildingGen()

###########################################################


  # The main loop that makes everything else go
  while(gameRunning) do(

  # Update the HUD
    updateHud()

  # Draw the mouse cursor
    doMouse()

  # This is used to pick the tile under the mouse cursor.
    mouseTileX := (mousePixelX+cameraPixelX) / 20
    mouseTileY := (mousePixelY+cameraPixelY) / 20

  # This is used to pick the hud element under the mouse cursor
    sliceUnderMouse := topmostSliceAtPixel(hud,mousePixelX,mousePixelY)
#    showValue(sliceUnderMouse)

  # Used for mouse hover detection. I stole this from KiefKrack and I don't understand how it works.
    npc := nextNpcReference()

  # For handling all unit behavior. I came up with this myself and I don't understand how it works.
    unit := nextNpcReference(unit)

    if(unit <> 0 )then(
      setUnitSide(unit)
      if(getUnitStat(unit,unitData:curHp)<=0)then(
        deleteNpc(unit)
        )else(
          side := getUnitStat(unit,unitData:side)
        switch(side)do(
          case(side:neutral)do(
            # Neutral AI goes here
            )
          case(side:saved)do(
            directive := getUnitStat(unit, unitData:directive)
            target := getUnitStat(unit, unitData:target)
            switch(directive)do(
              case(command:patrol)do(
              # check and see if in zone
                if(readZone(getUnitStat(unit,unitData:target),npcX(unit),npcY(unit)) == true) then(
              # if in zone, begin automated walk routine
                  setNpcMoves(unit, true)
                  cancelNpcWalk(unit)
                  alterNpc(unit,npcStat:moveType,npcMoveType:followWallsRight)
                  alterNpc(unit,npcStat:defaultMovementZone,target)
                  )
              # if in zone and automated walking, do line of site
                )
              case(command:attack)do(
              # check if target still exists
                if(target)then(
                #check and see if target is ahead
                  if(npcAtSpot(npcX(unit)+dirX(unit),npcY(unit+dirY(unit))) == target)then(
                      unitAttackSpeed := getUnitStat(unit,unitData:attackSpeed)
                      unitAttackCounter := getUnitStat(unit(unitData:attackCounter))
                      if(unitAttackCounter == unitAttackSpeed)then(
                          #do attack animation stuff
                          #do attack damage stuff
                          setUnitStat(target,unitData:curHp,getUnitStat(target,unitData:curHp)--getUnitStat(unit,unitData:strength))
                          showTextBox(1)
                          unitAttackCounter := 0
                          setUnitStat(unit,unitData:attackCounter, unitAttackCounter)
                        ) else(
                          unitAttackCounter += 1
                          setUnitStat(unit,unitData:attackCounter, unitAttackCounter)
                        )
                  ) else(
                #if target exists and is not ahead, continue chase behavior
                  )
                ) # end if(target)
              ) # end case(command:attack)
            ) # end switch(directive)
          ) # end case(side:saved)
          case(side:damned)do(
            # Enemy AI goes here
            )
          )
        )
      )

    if(selectedUnit <> -1) then(
        npc := selectedUnit
      )
    else(
        npc := npcAtPixel(mousePixelX+cameraPixelX, mousePixelY+cameraPixelY)
        )
    if(npc) then(
        updateHud(npc)
        setSliceVisible(lookupSlice(sli:unitStatsHud), true)
        if(stopNoise == 0) then(
            hl := loadWalkaboutSprite(12,5)
            setParent(hl, lookupSlice(sl:mapLayer6))
            putSprite(hl,mouseTileX*20,mouseTileY*20)
            playSound(2)
            stopNoise := 1
          )
      )
    else(
        setSliceVisible(lookupSlice(sli:unitStatsHud), false)
        freeSlice(hl)
        #stopNoise := 0
        )
    
    switch(state) do (
      case(state:idle) do(
        if(escPressed) then(
          if(topMenu == false) then(
              doGameMenu()
            ) else(
              closeMenu(topMenu)
            )
          ) elseif(leftClick) then(
                      freeSlice(hl)
                      if(selectedUnit == -1 && npc <> 0)then(
                        selectUnit(npc)
                        updateCommandMenu()
                        playSound(5)
                      )elseif(selectedUnit <> -1 && sliceCollidePoint(commandMenu,mousePixelX,mousePixelY)) then(
                        selectedHudCommand := sliceUnderMouse
                        selectCommandButton()
                      )else(
                          unselectUnit()
                        )
          ) elseif(rightClick) then(
              if(topMenu == false) then(
                  if(selectedUnit <> -1) then(
                      pathfindNpcTo(selectedUnit,mouseTileX,mouseTileY)
                      mapcursor := loadWalkaboutSprite(14)
                      putSprite(mapCursor, mouseTileX*20, mouseTileY*20)
                      freeSlice(mapCursor)
                      mapCursor := 0
                    )
                )
          )

          if(getSliceVisible(commandMenu) && sliceCollidePoint(commandMenu, mousePixelX, mousePixelY) ) then(
                if(cursor<>cursor:pick) then(setCursor(cursor:pick))

                if(sliceUnderMouse<>0 && sliceIsSprite(sliceUnderMouse))then(
                  if(sl<>0 && sliceUnderMouse<>sl)then(
                    if(modulus(getSpriteFrame(sl),2) == 1)then(
                      setSpriteFrame(sl, getSpriteFrame(sl)--1)
                      )
                    ) 
                  sl := sliceUnderMouse
                  if(modulus(getSpriteFrame(sl),2) == 0)then(
                    setSpriteFrame(sl, getSpriteFrame(sl)+1)
                    playSound(2)
                    )
                  )
                if(leftClick)then(
                  selectedHudCommand := getSliceLookup(sl)
                  playSound(5)
                  selectCommandButton()
                  state := state:command
                  )
          ) elseif(sl<>0)then(setSpriteFrame(sl,getSpriteFrame(sl)--1),sl:=0
             setCursor(cursor:pointer)
          )
        if(sliceCollidePoint(lookupSlice(sli:lifeStoryButton),mousePixelX,mousePixelY))then(
#              lifeStoryWindow := loadSliceCollection(2)
          ) 
        zonesHere := zoneAtSpot(mouseTileX,mouseTileY,getCount)
        showValue(zoneAtSpot(mouseTileX,mouseTileY))
        if(zonesHere==1)then(
          if(zoneAtSpot(mouseTileX,mouseTileY)>>100)then(
            doBuilding(zoneAtSpot(mouseTileX,mouseTileY))
            )
          )elseif(zonesHere>>1)then(
          for(i,0,zonesHere,1)do(
            if(zoneAtSpot(mouseTileX,mouseTileY,i)<<100)then(
              doBuilding(zoneAtSpot(mouseTileX,mouseTileY,i))
              break
              )
            ) 
          )
        )
      case(state:command) do(
          switch(selectedHudCommand) do(
        case(sli:iconMove) do(
              if(mapCursor) then(
                putSprite(mapCursor, mouseTileX*20, mouseTileY*20)
                if(leftClick) then( 
                  if(getUnitStat(selectedUnit,unitData:directive) == command:patrol)then(
                    breakPatrol(selectedUnit)
                  )
                  playSound(4)
                  pathfindNpcTo(selectedUnit, mouseTileX, mouseTileY)
                  if(mapCursor) then (
                    freeSlice(mapCursor)
                    mapCursor := 0
                    resetCommandButton()
                    state := state:idle
                    )
                )elseif(rightClick || escPressed) then(
                  resetCommandButton()
                  freeSlice(mapCursor)
                  mapCursor := 0
                  state := state:idle
                )
              )else(
                mapCursor := loadWalkaboutSprite(14)
                setParent(mapCursor,lookupSlice(sl:mapLayer6))
                )
           )# end case iconMove

        case(sli:iconPatrol) do(
          if(selector ^^ selector2) then(
            putSlice(selector, mouseTileX*20, mouseTileY*20)
            if(leftClick)then(
              selector2 := createContainer(1,1)
              setParent(selector2, lookupSlice(sl:maplayer6))
              )
            if(rightClick)then(
              freeSlice(selector)
              resetCommandButton()
              state := state:idle
              )
            )elseif(selector && selector2)then(
              putSlice(selector2,mouseTileX*20,mouseTileY*20)
              setSliceSize(selector, sliceX(selector2)--sliceX(selector), sliceY(selector2)--sliceY(selector))
              if(leftClick)then(
                if(getUnitStat(selectedUnit,unitData:directive) == command:patrol)then(
                  breakPatrol(selectedUnit)
                )
                setUnitStat(selectedUnit, unitData:target, getNpcId(selectedUnit)+100)
                setUnitStat(selectedUnit, unitData:directive, command:patrol)
 
                if(sliceX(selector) < sliceX(selector2))then(
                  zoneTileX := sliceX(selector) / 20
                  )else(zoneTileX := sliceX(selector2) / 20)

                if(sliceY(selector) < sliceY(selector2))then(
                  zoneTileY := sliceY(selector) / 20
                  )else(zoneTileY := sliceY(selector2) / 20)
                 zoneWidth := abs(sliceWidth(selector)) / 20  # x tiles to count
                 zoneHeight := abs(sliceHeight(selector)) / 20 # y tiles to count

                for(i,0,zoneWidth--1,1)do(
                  for(j,0,zoneHeight--1,1)do(
                    writeZone(getNpcId(selectedUnit)+100, zoneTileX+i, zoneTileY+j, true)
                    )
                )
                if(readZone(getUnitStat(selectedUnit,unitData:target),npcX(selectedUnit),npcY(selectedUnit)) == false) then(
                  pathfindNpcTo(selectedUnit,sliceX(selector)/20,sliceY(selector)/20)
                  )

                freeSlice(selector)
                selector := 0
                freeSlice(selector2)
                selector2 := 0
                resetCommandButton()
                state := state:idle
                )
              if(rightClick)then(
                freeSlice(selector)
                freeSlice(selector2)
                resetCommandButton()
                state := state:idle
                )
            )elseif(selector == false) then(
              selector := createRect(20,20,0)
              setParent(selector,lookupSlice(sl:maplayer6))
              setRectOpacity(selector, 20)
            )
          )
        case(sli:iconAttack) do(
            setCursor(cursor:attack)
              if(leftClick)then(
                if(npcAtPixel(mousePixelX,mousePixelY)==true)then(
                  setCursor(cursor:pointer)
                  selectedEnemy := npcAtPixel(mouseTileX*20, mouseTileY*20)
                  if(getUnitStat(selectedUnit, unitData:directive) == command:patrol)then(
                    breakPatrol(selectedUnit)
                    )
                  setUnitStat(selectedUnit,unitData:directive,command:attack)
                  setUnitStat(selectedUnit,unitData:target,selectedEnemy)
                  npcChasesNpc(selectedUnit,selectedEnemy)
                  setParent(mapTarget,getNpcSlice(selectedEnemy))
                  state := state:idle 
                  freeSlice(mapTarget)
                  resetCommandButton()
                  )
                )elseif(rightClick)then(
                  setCursor(cursor:pointer)
                  state := state:idle
                  freeSlice(mapTarget)
                  resetCommandButton()
                  )
          )
        case(sli:iconStop) do(
          cancelNpcWalk(selectedUnit)
          if(getUnitStat(selectedUnit,unitData:directive) == command:patrol)then(
            breakPatrol(selectedUnit)
            )
          setUnitStat(selectedUnit,unitData:directive, command:idle)
          resetCommandButton()
          state := state:idle
          )
        case(sli:iconPray) do(
          #playSound()
          #do animation
          if(getUnitStat(selectedUnit,unitData:spirit)<<100)then(
            setUnitStat(selectedUnit,unitData:spirit,getUnitStat(selectedUnit,unitData:spirit)+getUnitStat(selectedUnit,unitData:spirit)/10)
            )
          if(getunitStat(selectedUnit,unitData:spirit)>>100)then(setUnitStat(selectedUnit,unitData:spirit,100))
            resetCommandButton()
            state := state:idle
          )
        case(sli:iconRecruit) do(
          )
        case(sli:iconAcquire) do(
          )
        case(sli:iconBuild) do(
          )
        case(sli:iconPreach) do(
          )
        case(sli:iconConvert) do(
          )
        case(sli:iconRally) do(
          )
        case(sli:iconSurvey) do(
          )
        case(sli:iconFollow) do(
          )
        case(sli:iconAuto) do(
          )
        case(sli:iconSing) do(
          )
        case(else) do(
            exit
          )
        )#end switch selectedHudCommand
      )# end command case
    ) #end something??
#  setCursor(cursor:pointer)
  doCameraScroll()
  resetInputs()
  wait(1)
  )  #end main loop
end

script, updateHud, npc=0, begin
    
    variable(txt, whichUnit)
  

  if(npc)then(  whichUnit := getNpcSlice(npc)

  # Name
    txt := lookupSlice(sli:unitName, hud)
    getSliceText(0, firstTextChild(whichUnit))
    setSliceText(txt, 0)
  
  # Class
    txt := lookupSlice(sli:unitClass, hud)
    switch(getSliceExtra(whichUnit,0)) do(
      case(0) do($0="Civilian")
      case(1) do($0="Disciple")
      case(2) do($0="Friend")
      case(3) do($0="Medic")
      case(4) do($0="Builder")
      case(5) do($0="Musician")
      case(6) do($0="Soldier")
      )
    setSliceText(txt, 0)

  # Health
    txt := lookupSlice(sli:unitHealth, hud)
    clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:curHp))
    setSliceText(txt, 0)

  # HealthMax
    txt := lookupSlice(sli:unitHealthMax, hud)
    clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:maxHp))
    setSliceText(txt,0)
    
   # Defense
   txt := lookupSlice(sli:unitDefense, hud)
   clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:defense))
    setSliceText(txt,0)
   
   # Strength
    txt := lookupSlice(sli:unitStrength, hud)
    clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:strength))
    setSliceText(txt,0)
   
   # Attack Speed
    txt := lookupSlice(sli:unitAttackSpeed, hud)
    clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:attackSpeed))
    setSliceText(txt,0)
   
   # Spirit
    txt := lookupSlice(sli:unitSpirit, hud)
    clearString(0)
    appendNumber(0, getUnitStat(npc,unitData:spirit))
    setSliceText(txt,0)
    )
    

    # Player Spirit
     txt := lookupSlice(sli:spirit, hud)
     clearString(0)
     appendNumber(0,getSliceExtra(playerStatSlice,pstat:spirit))
     setSliceText(txt,0)
    # Player Money
     txt := lookupSlice(sli:money, hud)
     clearString(0)
     appendNumber(0,getSliceExtra(playerStatSlice,pstat:money))
     setSliceText(txt,0)
    # Player Housing
     txt := lookupSlice(sli:housingCur, hud)
     clearString(0)
     appendNumber(0,getSliceExtra(playerStatSlice,pstat:housing))
     setSliceText(txt,0)
    # Player Housing Max
     txt := lookupSlice(sli:housingMax, hud)
     clearString(0)
     appendNumber(0,getSliceExtra(playerStatSlice,pstat:housingMax))
     setSliceText(txt,0)
    # Player Food
     txt := lookupSlice(sli:food, hud)
     clearString(0)
     appendNumber(0,getSliceExtra(playerStatSlice,pstat:food))
     setSliceText(txt,0)
end